dnl
dnl opencpn configure.in script
dnl
dnl Dave Register
dnl
dnl  With portions extracted from Audacity project
dnl   Authors Joshua Haberman, Dominic Mazzoni
dnl

dnl Process this file with autoconf to produce a configure script.

dnl Disable configure caching ... it causes lots of hassles.
define([AC_CACHE_LOAD], )
define([AC_CACHE_SAVE], )

dnl
dnl  Include some useful macros
m4_include([gtk-2.0.m4])
m4_include([gtk.m4])

dnl Init autoconf
AC_INIT(src/chart1.cpp)
AM_INIT_AUTOMAKE(opencpn, 0.1)
#AC_CONFIG_HEADER(config.h)

dnl Checks for required system programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_LANG([C++])
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_CPP
AC_PROG_INSTALL
AC_LIBTOOL_DLOPEN
#AC_PROG_LIBTOOL

dnl  Set default CXX flags
CPPSAVE="$CPPFLAGS"
dnl CPPFLAGS="$CPPFLAGS -Wall -g -fexceptions"
dnl CXXFLAGS="$CPPFLAGS -Wall -g -fexceptions"


dnl
dnl Check for -fno-stack-protector, present on gcc >4.1
CXXFLAGS="$CPPFLAGS -Wall -g -fexceptions -fno-stack-protector"
AC_MSG_CHECKING([for SSP support/disable])
AC_TRY_COMPILE([ ],
[ ],
ac_buildfor_SSP=yes, ac_buildfor_SSP=no)

AC_MSG_RESULT([$ac_buildfor_SSP])

if test $ac_buildfor_SSP = no; then
         CXXFLAGS="$CPPSAVE -Wall -g -fexceptions"
fi

       

dnl
dnl Make the install prefix available to the program so that it
dnl knows where to look for help files, plug-ins, etc.
dnl

AC_PREFIX_DEFAULT(/usr/local)
if [[ $prefix = "NONE" ]] ; then
	AC_DEFINE(INSTALL_PREFIX, "/usr/local",
        [define as prefix where opencpn is installed])
else
	AC_DEFINE_UNQUOTED(INSTALL_PREFIX, "$prefix")
fi

dnl
dnl Enable/Disable S57 ENC Support
dnl
AC_ARG_ENABLE(s57enc,
     [  --disable-s57enc        Disable S57 ENC Support],, s57enc=true)

AM_CONDITIONAL(BUILD_WITH_S57, test x$s57enc = xtrue)
AC_SUBST(BUILD_WITH_S57)

AC_CANONICAL_HOST
AC_SUBST(HOST_OS, $host_os)

dnl pull in OpenGL headers and link with OpenGL libraries on the mac
DARWIN_CPP_EXTRA=-I/Developer/SDKs/MacOSX10.4u.sdk/usr/X11R6/include
DARWIN_LD_EXTRA=-L/System/Library/Frameworks/OpenGL.framework/Libraries
case $host_os in
 darwin*) build_for_darwin=true;
          CPPFLAGS="$CPPFLAGS $DARWIN_CPP_EXTRA";
          LDFLAGS="$LDFLAGS $DARWIN_LD_EXTRA";
        ;;
esac

AM_CONDITIONAL(BUILD_FOR_DARWIN, test x$build_for_darwin = xtrue)
AC_SUBST(BUILD_FOR_DARWIN)

dnl
dnl Use OpenGL tesselator or Internal tesselator
dnl
tess_internal=false
tess_glu=true
AC_ARG_WITH(tess_internal,
          [[  --with-tess-internal    use Internal Polygon Tesselator]],
          [tess_internal=true]
           )

if [[ "$tess_internal" = "false" ]] ; then
	dnl  Look for and qualify an external GLU library
	echo "checking for useable OpenGLU Library"
	AC_CHECK_LIB(GLU, gluNewTess, true, dnl here true is just a nop
	   AC_MSG_ERROR([*** libGLU not found.  Run configure using --with-tess-internal.]))
	
	GL_LIBS="-lGL -lGLU"
	AC_SUBST(GL_LIBS)

	GL_CFLAGS="-DUSE_GLU_TESS"
	AC_SUBST(GL_CFLAGS)
fi


AM_CONDITIONAL(BUILD_WITH_INTERNAL_TESS, test x$tess_internal = xtrue)
AC_SUBST(BUILD_WITH_INTERNAL_TESS)
AM_CONDITIONAL(BUILD_WITH_GLU_TESS, test x$tess_internal = xfalse)
AC_SUBST(BUILD_WITH_GLU_TESS)

dnl
dnl Include (undocumented) special wifi client
dnl
wifi_client=false
AC_ARG_WITH(wifi_client,
          [[  --with-wifi-client      Enable wifi client]],
          [wifi_client=true]
           )

AM_CONDITIONAL(BUILD_WITH_WIFI_CLIENT, test x$wifi_client = xtrue)
AC_SUBST(BUILD_WITH_WIFI_CLIENT)


dnl
dnl Check wxWidgets configuration
dnl
dnl   config option --with-wx-config=FILE allows building opencpn against
dnl   multiple wxWidgets models, such as GTK, X11, either statically or
dnl   dynamically linked, etc.
WXCONFIG=wx-config
AC_ARG_WITH(wx-config,
[[  --with-wx-config=FILE     Use the given path to wx-config when determining
                            wxWidgets configuration; defaults to "wx-config"]],
[
    if test "$withval" != "yes" -a "$withval" != ""; then
        WXCONFIG=$withval
    fi
])

wxversion=0

AC_DEFUN([WXTEST],
[
      AC_REQUIRE([AC_PROG_AWK])
      AC_MSG_CHECKING([wxWidgets wx-config])
      AC_MSG_RESULT([$WXCONFIG])
      AC_MSG_CHECKING([wxWidgets version])
      if wxversion=`$WXCONFIG --version`; then
            AC_MSG_RESULT([$wxversion])
      else
            AC_MSG_RESULT([not found])
            AC_MSG_ERROR([wxWidgets is required. Try --with-wx-config.])
      fi])

# Call WXTEST func
WXTEST

# Verify minimum requirement
vers=`echo $wxversion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`
if test -n "$vers" && test "$vers" -ge 2006002; then
      WX_CPPFLAGS="`$WXCONFIG --cppflags`"
      WX_CXXFLAGS="`$WXCONFIG --cxxflags | sed -e 's/-fno-exceptions//'`"
      WX_LIBS="`$WXCONFIG --libs`"
      WX_HOME="`$WXCONFIG --prefix`"
      AC_MSG_CHECKING([for wxWidgets location])
      AC_MSG_RESULT([$WX_HOME])
      WX_RELEASE="`$WXCONFIG --release`"
      AC_MSG_CHECKING([for wxWidgets release (major, minor) number])
      AC_MSG_RESULT([$WX_RELEASE])
else
      AC_MSG_ERROR([wxWidgets 2.6.2 or newer is required])
fi

CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
#CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS"
AC_SUBST(WX_LIBS)
AC_SUBST(WX_HOME)
AC_SUBST(WX_RELEASE)

dnl __WXX11__ 2.6.X...2.8.3 is broken in wxHashTable::Next().
dnl Error occurs in wxSocketClient, and manifests as forever lost events,
dnl and sometimes segmentation faults.  Ouch.
dnl if using __WXX11__, check definition of WXWIN_COMPATIBILITY_2_4

dnl For informational purposes, build the name of the relevent setup.h file
WX_SETUP_H0="`$WXCONFIG --cxxflags | awk '/lib/{for(i=1;i<=NF;i++) print $i }' | grep lib | sed -e 's/-I//g'`"
WX_SETUP_H=$WX_SETUP_H0'/wx/setup.h'
AC_MSG_CHECKING([for wxWidgets setup header])
AC_MSG_RESULT([$WX_SETUP_H])


dnl Check for __WXX11__
AC_MSG_CHECKING([for __WXX11__])
AC_TRY_COMPILE([
#include	"wx/setup.h"],
[ #ifdef __WXX11__
#else
cause an error
#endif],
ac_buildfor_x11=yes, ac_buildfor_x11=no)

AC_MSG_RESULT([$ac_buildfor_x11])

dnl If compiled for __WXX11__ and wx Version is less than 2.8.4, check wxWidgets 2.4 compatibility flag
if test $ac_buildfor_x11 = yes &&  test -n "$vers" && test "$vers" -lt 2008004; then
	AC_MSG_CHECKING([for WXWIN_COMPATIBILITY_2_4])

	AC_TRY_COMPILE([
	#include	"wx/setup.h"],
	[ #if WXWIN_COMPATIBILITY_2_4
	#else
	cause an error
	#endif], compat_24=yes, compat_24=no)

	AC_MSG_RESULT([$compat_24])

	if test $compat_24 = no; then
      		AC_MSG_WARN([!!!opencpn for X11 Universal Mode requires that])
		AC_MSG_WARN([wxWidgets (for X11) prior to Release 2.8.4 be compiled with])
		AC_MSG_WARN([Version 2.4 compatibility mode enabled.])
		AC_MSG_WARN([Please rebuild wxWidgets with "--enable-compat24" configuration option.])
		AC_MSG_WARN([Meanwhile, GPSD Network data input is being disabled.])

        	AC_DEFINE(OCPN_DISABLE_SOCKETS, 1,
            		[Define if you need to disable TCP/IP Socket utilization.])
        fi
fi


dnl
dnl  Get GTK+ paths as necessary
dnl

dnl  First, look for GTK in wx library

AC_MSG_CHECKING([for __WXGTK__])
AC_TRY_COMPILE([
#include	"wx/setup.h"],
[ #ifdef __WXGTK__
#else
Some error
#endif],
ac_buildfor_wxgtk=yes, ac_buildfor_wxgtk=no)
AC_MSG_RESULT([$ac_buildfor_wxgtk])

dnl    provisionally try a gtk test
ac_testcompile_gtk=no
if test $ac_buildfor_wxgtk = yes; then
     ac_testcompile_gtk=yes
fi

dnl
dnl   Check for presence of libgtk2.0-dev
dnl

dnl    Use pkg-config to get the gtk cflags

  my_pkg_config_args=gtk+-2.0
  for module in $GTK_MODULES
  do
      case "$module" in
         gthread) 
             pkg_config_args="$pkg_config_args gthread-2.0"
         ;;
      esac
  done

  my_no_gtk=""

  AC_PATH_PROG(MY_PKG_CONFIG, pkg-config, no)

  if test x$MY_PKG_CONFIG != xno ; then
    if pkg-config --atleast-pkgconfig-version 0.7 ; then
      :
    else
      echo "*** pkg-config too old; version 0.7 or better required."
      my_no_gtk=yes
      MY_PKG_CONFIG=no
    fi
  else
    my_no_gtk=yes
  fi

  my_min_gtk_version=2.0.0
  AC_MSG_CHECKING(for GTK+ - version >= $my_min_gtk_version)

  if test x$MY_PKG_CONFIG != xno ; then
    if $MY_PKG_CONFIG --atleast-version $my_min_gtk_version $my_pkg_config_args; then
	  :
    else
	  my_no_gtk=yes
    fi
  fi

  if test x"$my_no_gtk" = x ; then
    AC_MSG_RESULT(yes)
    MY_GTK_CFLAGS=`$MY_PKG_CONFIG $my_pkg_config_args --cflags`
  else
    AC_MSG_RESULT(no)  
  fi

dnl    if there is no pkg-config for gtk+-2.0, cannot run the test program

if test x$my_no_gtk = xyes; then
    have_gtkdevel=no
    ac_testcompile_gtk=no
else
    CXXFLAGS="$CXXFLAGS $MY_GTK_CFLAGS"

dnl  At this point, pkg-config reports ok for gtk+-2.0
dnl  However, on some systems the correct include files
dnl  may still not be present.
dnl  Run a test compile to be sure

    AC_MSG_CHECKING([for libgtk2.0-dev include files])
dnl try a simple compile
    AC_TRY_COMPILE([#include <gtk/gtk.h>],
               [ ], have_gtkdevel=yes, have_gtkdevel=no)
    AC_MSG_RESULT([$have_gtkdevel])
fi

dnl  Some systems have trouble finding cairo.h
dnl  Make an explicit check

    AC_MSG_CHECKING([for cairo.h in include path])
dnl try a simple compile
    AC_TRY_COMPILE([#include <cairo.h>],
               [ ], have_goodcairo=yes, have_goodcairo=no)
    AC_MSG_RESULT([$have_goodcairo])

if test x$have_goodcairo = xno; then
    CXXFLAGS="$CXXFLAGS -I/usr/include/cairo"
fi




dnl    Pass the option to makefile.am
AM_CONDITIONAL(BUILD_WITH_GTK_OPTIMIZATION, test x$have_gtkdevel = xyes)
AC_SUBST(BUILD_WITH_GTK_OPTIMIZATION)

dnl     if fully useable libgtk+2-devel(libgtk2.0-dev) is not available...
if test $have_gtkdevel = no; then
    enable_gtktest=no
    ac_testcompile_gtk=no
    AC_MSG_WARN([Disabling some GTK display optimizations])
    AC_MSG_WARN([You may want to consider installing libgtk2.0-dev])
fi



if test $ac_testcompile_gtk = yes; then

    AC_MSG_CHECKING([for GTK+-2.0 test compile and run])
    AC_MSG_RESULT()

dnl   if test "$wxUSE_GTK" = 1; then
        dnl GTK+ test program must be compiled with C compiler
        AC_MSG_CHECKING([for GTK+ version])

        gtk_version_cached=1
        AC_CACHE_VAL(wx_cv_lib_gtk,
            [
                dnl stupid GTK+ AM macros produce their own messages, so we
                dnl have to pass to the next line
                gtk_version_cached=0
                AC_MSG_RESULT()

                dnl we must link against lgthread unless the user
                dnl used --disable-threads
                GTK_MODULES=
                if test "$wxUSE_THREADS" = "yes"; then
                    GTK_MODULES=gthread
                fi

                dnl detect GTK2
                wx_cv_lib_gtk=
                if test "x$wxGTK_VERSION" != "x1"
                then
                    dnl The gthread.pc that ships with solaris returns '-mt',
                    dnl it's correct for Sun CC, but gcc requires '-pthreads'.
                    dnl So disable the compile check and remove the -mt below.
                    case "${host}" in
                        *-*-solaris2* )
                            if test "$wxUSE_THREADS" = "yes" -a "$GCC" = yes; then
                            enable_gtktest=no
                            fi
                    esac

                    AM_PATH_GTK_2_0(2.0.0, wx_cv_lib_gtk=2.0, , $GTK_MODULES)

                    dnl Remove the '-mt' for gcc on solaris
                    case "${host}" in
                        *-*-solaris2* )
                            if test "$wxUSE_THREADS" = "yes" -a "$GCC" = yes; then
                                GTK_CFLAGS=`echo $GTK_CFLAGS | sed 's/-mt//'`
                                GTK_LIBS=`echo $GTK_LIBS | sed 's/-mt//'`
                            fi
                            dnl solaris also requires -lX11 for static lib
                            if test "$wxUSE_SHARED" != "yes"; then
                                GTK_LIBS="$GTK_LIBS -lX11"
                            fi
                    esac
                fi

                dnl detect GTK1.x
                if test -z "$wx_cv_lib_gtk"; then
                    if test "x$wxGTK_VERSION" = "x1" -o "x$wxGTK_VERSION" = "xany" ; then
                        AM_PATH_GTK(1.2.7, wx_cv_lib_gtk=1.2.7, , $GTK_MODULES)

                        if test -z "$wx_cv_lib_gtk"; then
                            AM_PATH_GTK(1.2.3, wx_cv_lib_gtk=1.2.3, , $GTK_MODULES)
                        fi
                    fi
                fi

                if test -z "$wx_cv_lib_gtk"; then
                    dnl looks better in AC_MSG_RESULT
                    wx_cv_lib_gtk=none
                else
                    dnl we need to cache GTK_CFLAGS and GTK_LIBS for the
                    dnl subsequent runs
                    wx_cv_cflags_gtk=$GTK_CFLAGS
                    wx_cv_libs_gtk=`echo $GTK_LIBS | sed -e 's/ -l[[^ ]]*cairo[[^ ]]*//g'`
                fi
            ]
        )

        dnl if it wasn't cached, the messages from AM_PATH_GTK() above are
        dnl enough
        if test "$gtk_version_cached" = 1; then
            AC_MSG_RESULT($wx_cv_lib_gtk)
        fi

   fi

dnl
dnl  At this point, CXXFLAGS now contains the proper include paths for GTK+
dnl


dnl
dnl  Create the output file
dnl
AC_OUTPUT(Makefile)
